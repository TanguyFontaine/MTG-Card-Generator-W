{"ast":null,"code":"var _jsxFileName = \"C:\\\\Visual Studio Projects\\\\card-generator-tanguy\\\\src\\\\CardGenerator.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; // 1. import `ChakraProvider` component to have chakra work correctly\n\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { SimpleGrid } from \"@chakra-ui/react\";\n/***************************************************************/\n\nimport theme from \"./theme\";\nimport { UiPanel } from \"./components/ui_panel\";\nimport { CardImagePanel } from \"./components/card_image_panel\";\n/***************************************************************/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CardGenerator() {\n  _s();\n\n  const [imageFile, setImageFile] = useState({\n    name: \"\",\n    content: \"\"\n  });\n  const [cardName, setCardName] = useState(\"\");\n  const [types, setTypes] = useState([]);\n  const [superTypes, setSuperTypes] = useState([]);\n  const [subTypes, setSubTypes] = useState(\"\");\n  const [cardFrame, setCardFrame] = useState(\"\"); // To be completed later\n\n  const [manaSymbols, setManaSymbols] = useState([]);\n  const [spellDescription, setSpellDescription] = useState(\"\");\n  const [flavorText, setFlavorText] = useState(\"\");\n  const [power, setPower] = useState(\"\");\n  const [toughness, setToughness] = useState(\"\");\n  return /*#__PURE__*/_jsxDEV(ChakraProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(SimpleGrid, {\n      columns: 2,\n      h: \"100vh\",\n      w: \"100%\",\n      children: [/*#__PURE__*/_jsxDEV(UiPanel, {\n        setCardName: name => setCardName(name),\n        setImageFileFunction: file => setImageFile(file),\n        selectedImageFileName: imageFile.name,\n        setTypes: types => setTypes(types),\n        setSuperTypes: superTypes => setSuperTypes(superTypes),\n        setSubTypes: subTypes => setSubTypes(subTypes),\n        setCardFrame: cardFrame => setCardFrame(cardFrame),\n        setSpellDescription: spellDescription => setSpellDescription(spellDescription),\n        setFlavorText: flavorText => setFlavorText(flavorText)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardImagePanel, {\n        imageFile: imageFile,\n        cardName: cardName,\n        types: types,\n        superTypes: superTypes,\n        subTypes: subTypes,\n        cardFrame: cardFrame,\n        spellDescription: spellDescription,\n        flavorText: flavorText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CardGenerator, \"Vu/Cyxvthh+6/CBM6Bih8zxjlUM=\");\n\n_c = CardGenerator;\nexport { CardGenerator };\n\nvar _c;\n\n$RefreshReg$(_c, \"CardGenerator\");","map":{"version":3,"sources":["C:/Visual Studio Projects/card-generator-tanguy/src/CardGenerator.jsx"],"names":["React","useState","ChakraProvider","SimpleGrid","theme","UiPanel","CardImagePanel","CardGenerator","imageFile","setImageFile","name","content","cardName","setCardName","types","setTypes","superTypes","setSuperTypes","subTypes","setSubTypes","cardFrame","setCardFrame","manaSymbols","setManaSymbols","spellDescription","setSpellDescription","flavorText","setFlavorText","power","setPower","toughness","setToughness","file"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n// 1. import `ChakraProvider` component to have chakra work correctly\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport { SimpleGrid } from \"@chakra-ui/react\"\n\n/***************************************************************/\n\nimport theme from \"./theme\"\nimport { UiPanel } from \"./components/ui_panel\"\nimport { CardImagePanel } from \"./components/card_image_panel\"\n\n/***************************************************************/\nfunction CardGenerator() {\n\n    const [imageFile, setImageFile] = useState({\n        name: \"\",\n        content: \"\"\n    })\n\n    const [cardName, setCardName] = useState(\"\")\n\n    const [types, setTypes] = useState([])\n\n    const [superTypes, setSuperTypes] = useState([])\n\n    const [subTypes, setSubTypes] = useState(\"\")\n\n    const [cardFrame, setCardFrame] = useState(\"\")\n\n    // To be completed later\n    const [manaSymbols, setManaSymbols] = useState([])\n\n    const [spellDescription, setSpellDescription] = useState(\"\")\n\n    const [flavorText, setFlavorText] = useState(\"\")\n\n    const [power, setPower] = useState(\"\")\n\n    const [toughness, setToughness] = useState(\"\")\n\n    return (\n        <ChakraProvider theme={theme} >\n            <SimpleGrid columns={2} h=\"100vh\" w=\"100%\">\n                <UiPanel setCardName={(name) => setCardName(name)} \n                         setImageFileFunction={(file) => setImageFile(file)} selectedImageFileName={imageFile.name}\n                         setTypes={(types) => setTypes(types)}\n                         setSuperTypes={(superTypes) => setSuperTypes(superTypes)}\n                         setSubTypes={(subTypes) => setSubTypes(subTypes)}\n                         setCardFrame={(cardFrame) => setCardFrame(cardFrame)}\n                         setSpellDescription={(spellDescription) => setSpellDescription(spellDescription)}\n                         setFlavorText={(flavorText) => setFlavorText(flavorText)}/>\n                <CardImagePanel \n                    imageFile={imageFile} \n                    cardName={cardName} \n                    types={types} \n                    superTypes={superTypes} \n                    subTypes={subTypes} \n                    cardFrame={cardFrame} \n                    spellDescription={spellDescription}\n                    flavorText={flavorText}/>\n            </SimpleGrid>\n        </ChakraProvider>\n    );\n}\n\nexport { CardGenerator };"]},"metadata":{},"sourceType":"module"}