{"ast":null,"code":"import { useState } from 'react';\nimport html2canvas from 'html2canvas';\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n/**\n * @module Main_Hook\n * Hook return\n * @typedef {Array} HookReturn\n * @property {string} HookReturn[0] - image string\n * @property {string} HookReturn[1] - take screen shot string\n * @property {object} HookReturn[2] - errors\n */\n\n/**\n * hook for creating screenshot from html node\n * @returns {HookReturn}\n */\n\n\nvar useScreenshot = function useScreenshot() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      type = _ref.type,\n      quality = _ref.quality;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n  /**\n   * convert html node to image\n   * @param {HTMLElement} node\n   */\n\n\n  var takeScreenShot = function takeScreenShot(node) {\n    if (!node) {\n      throw new Error('You should provide correct html node.');\n    }\n\n    return html2canvas(node).then(function (canvas) {\n      var croppedCanvas = document.createElement('canvas');\n      var croppedCanvasContext = croppedCanvas.getContext('2d'); // init data\n\n      var cropPositionTop = 0;\n      var cropPositionLeft = 0;\n      var cropWidth = canvas.width;\n      var cropHeight = canvas.height;\n      croppedCanvas.width = cropWidth;\n      croppedCanvas.height = cropHeight;\n      croppedCanvasContext.drawImage(canvas, cropPositionLeft, cropPositionTop);\n      var base64Image = croppedCanvas.toDataURL(type, quality);\n      setImage(base64Image);\n      return base64Image;\n    })[\"catch\"](setError);\n  };\n\n  return [image, takeScreenShot, {\n    error: error\n  }];\n};\n/**\n * creates name of file\n * @param {string} extension\n * @param  {string[]} parts of file name\n */\n\n\nvar createFileName = function createFileName() {\n  var extension = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  if (!extension) {\n    return '';\n  }\n\n  for (var _len = arguments.length, names = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    names[_key - 1] = arguments[_key];\n  }\n\n  return \"\".concat(names.join(''), \".\").concat(extension);\n};\n\nexport { createFileName, useScreenshot };","map":{"version":3,"sources":["../src/index.js"],"names":["useScreenshot","type","quality","image","setImage","useState","error","setError","takeScreenShot","croppedCanvas","document","croppedCanvasContext","cropPositionTop","cropPositionLeft","cropWidth","canvas","cropHeight","base64Image","createFileName","extension","names"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport html2canvas from 'html2canvas'\n\n/**\n * @module Main_Hook\n * Hook return\n * @typedef {Array} HookReturn\n * @property {string} HookReturn[0] - image string\n * @property {string} HookReturn[1] - take screen shot string\n * @property {object} HookReturn[2] - errors\n */\n\n/**\n * hook for creating screenshot from html node\n * @returns {HookReturn}\n */\nconst useScreenshot = ({ type, quality } = {}) => {\n  const [image, setImage] = useState(null)\n  const [error, setError] = useState(null)\n  /**\n   * convert html node to image\n   * @param {HTMLElement} node\n   */\n  const takeScreenShot = (node) => {\n    if (!node) {\n      throw new Error('You should provide correct html node.')\n    }\n    return html2canvas(node)\n      .then((canvas) => {\n        const croppedCanvas = document.createElement('canvas')\n        const croppedCanvasContext = croppedCanvas.getContext('2d')\n        // init data\n        const cropPositionTop = 0\n        const cropPositionLeft = 0\n        const cropWidth = canvas.width\n        const cropHeight = canvas.height\n\n        croppedCanvas.width = cropWidth\n        croppedCanvas.height = cropHeight\n\n        croppedCanvasContext.drawImage(\n          canvas,\n          cropPositionLeft,\n          cropPositionTop,\n        )\n\n        const base64Image = croppedCanvas.toDataURL(type, quality)\n\n        setImage(base64Image)\n        return base64Image\n      })\n      .catch(setError)\n  }\n\n  return [\n    image,\n    takeScreenShot,\n    {\n      error,\n    },\n  ]\n}\n\n/**\n * creates name of file\n * @param {string} extension\n * @param  {string[]} parts of file name\n */\nconst createFileName = (extension = '', ...names) => {\n  if (!extension) {\n    return ''\n  }\n\n  return `${names.join('')}.${extension}`\n}\n\nexport { useScreenshot, createFileName }\n"]},"metadata":{},"sourceType":"module"}