{"ast":null,"code":"var _jsxFileName = \"C:\\\\Visual Studio Projects\\\\card-generator-tanguy\\\\src\\\\CardGenerator.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react'; // 1. import `ChakraProvider` component to have chakra work correctly\n\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { SimpleGrid, useControllableState } from \"@chakra-ui/react\";\nimport \"@fontsource/eb-garamond/400.css\";\nimport \"@fontsource/eb-garamond/500.css\";\nimport \"@fontsource/eb-garamond/600.css\";\nimport \"@fontsource/eb-garamond/700.css\";\nimport \"@fontsource/eb-garamond/800.css\";\nimport \"@saeris/typeface-beleren-bold\";\nimport \"mana-font\";\n/***************************************************************/\n\nimport theme from \"./theme\";\nimport { UiPanel } from \"./components/ui_panel\";\nimport { CardImagePanel } from \"./components/card_image_panel\";\n/***************************************************************/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CardGenerator() {\n  _s();\n\n  const cardImageRef = useRef();\n  const [imageFile, setImageFile] = useState({\n    name: \"\",\n    content: \"\"\n  });\n  const [imageCentering, setImageCentering] = useState(\"center\");\n  const [cardName, setCardName] = useState(\"\");\n  const [nameFontSize, setNameFontSize] = useControllableState({\n    defaultValue: 32\n  });\n  const [types, setTypes] = useState([]);\n  const [superTypes, setSuperTypes] = useState([]);\n  const [subTypes, setSubTypes] = useState(\"\");\n  const [typesFontSize, setTypesFontSize] = useControllableState({\n    defaultValue: 28\n  });\n  const [cardFrameColor, setCardFrame] = useState(\"\");\n  const [manaCost, setManaCost] = useState([]); // Easier to handle colorless mana on its own. Begin at -1 to display 0 mana artifacts\n\n  const [colorlessManaAmount, setColorlessManaAmount] = useState(-1);\n  const [spellDescription, setSpellDescription] = useState(\"\");\n  const [spellFontSize, setSpellFontSize] = useControllableState({\n    defaultValue: 22\n  });\n  const [flavorText, setFlavorText] = useState(\"\");\n  const [flavorTextFontSize, setFlavorTextFontSize] = useControllableState({\n    defaultValue: 21\n  });\n  const [power, setPower] = useState(\"\");\n  const [toughness, setToughness] = useState(\"\");\n  const [ptFontSize, setPTFontSize] = useControllableState({\n    defaultValue: 34\n  }); // clean planeswalker ?\n\n  const [loyalty, setLoyalty] = useState(\"\");\n  return /*#__PURE__*/_jsxDEV(ChakraProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(SimpleGrid, {\n      columns: 2,\n      h: \"937\",\n      w: \"1920\",\n      children: [/*#__PURE__*/_jsxDEV(UiPanel, {\n        setCardName: setCardName,\n        nameFontSize: nameFontSize,\n        setNameFontSize: setNameFontSize,\n        setImageFileFunction: setImageFile,\n        selectedImageFileName: imageFile.name,\n        setTypes: setTypes,\n        setSuperTypes: setSuperTypes,\n        setTypesFontSize: setTypesFontSize,\n        typesFontSize: typesFontSize,\n        setSubTypes: setSubTypes,\n        setManaCost: setManaCost,\n        manaCost: manaCost,\n        setColorlessManaAmount: setColorlessManaAmount,\n        colorlessManaAmount: colorlessManaAmount,\n        setCardFrame: setCardFrame,\n        setSpellDescription: setSpellDescription,\n        spellDescription: spellDescription,\n        setSpellFontSize: setSpellFontSize,\n        spellFontSize: spellFontSize,\n        setFlavorText: setFlavorText,\n        setFlavorTextFontSize: setFlavorTextFontSize,\n        flavorTextFontSize: flavorTextFontSize,\n        setPower: setPower,\n        setToughness: setToughness,\n        setPTFontSize: setPTFontSize,\n        ptFontSize: ptFontSize,\n        setLoyalty: setLoyalty,\n        setImageCentering: setImageCentering,\n        cardImageRef: cardImageRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardImagePanel, {\n        imageFile: imageFile,\n        cardName: cardName,\n        nameFontSize: nameFontSize,\n        types: types,\n        superTypes: superTypes,\n        subTypes: subTypes,\n        typesFontSize: typesFontSize,\n        manaCost: manaCost,\n        colorlessManaAmount: colorlessManaAmount,\n        cardFrameColor: cardFrameColor,\n        spellDescription: spellDescription,\n        spellFontSize: spellFontSize,\n        flavorText: flavorText,\n        flavorTextFontSize: flavorTextFontSize,\n        power: power,\n        toughness: toughness,\n        ptFontSize: ptFontSize,\n        loyalty: loyalty,\n        imageCentering: imageCentering,\n        ref: cardImageRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CardGenerator, \"NJakv9qk5FhA8d4HrKF1oaY/fX4=\", false, function () {\n  return [useControllableState, useControllableState, useControllableState, useControllableState, useControllableState];\n});\n\n_c = CardGenerator;\nexport { CardGenerator };\n\nvar _c;\n\n$RefreshReg$(_c, \"CardGenerator\");","map":{"version":3,"sources":["C:/Visual Studio Projects/card-generator-tanguy/src/CardGenerator.jsx"],"names":["React","useRef","useState","ChakraProvider","SimpleGrid","useControllableState","theme","UiPanel","CardImagePanel","CardGenerator","cardImageRef","imageFile","setImageFile","name","content","imageCentering","setImageCentering","cardName","setCardName","nameFontSize","setNameFontSize","defaultValue","types","setTypes","superTypes","setSuperTypes","subTypes","setSubTypes","typesFontSize","setTypesFontSize","cardFrameColor","setCardFrame","manaCost","setManaCost","colorlessManaAmount","setColorlessManaAmount","spellDescription","setSpellDescription","spellFontSize","setSpellFontSize","flavorText","setFlavorText","flavorTextFontSize","setFlavorTextFontSize","power","setPower","toughness","setToughness","ptFontSize","setPTFontSize","loyalty","setLoyalty"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from 'react';\n// 1. import `ChakraProvider` component to have chakra work correctly\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport { SimpleGrid, useControllableState } from \"@chakra-ui/react\"\n\nimport \"@fontsource/eb-garamond/400.css\"\nimport \"@fontsource/eb-garamond/500.css\"\nimport \"@fontsource/eb-garamond/600.css\"\nimport \"@fontsource/eb-garamond/700.css\"\nimport \"@fontsource/eb-garamond/800.css\"\nimport \"@saeris/typeface-beleren-bold\"\nimport \"mana-font\"\n\n/***************************************************************/\n\nimport theme from \"./theme\"\nimport { UiPanel } from \"./components/ui_panel\"\nimport { CardImagePanel } from \"./components/card_image_panel\"\n\n/***************************************************************/\nfunction CardGenerator() {\n\n    const cardImageRef = useRef();\n\n    const [imageFile, setImageFile] = useState({\n        name: \"\",\n        content: \"\"\n    })\n    const [imageCentering, setImageCentering] = useState(\"center\") \n\n    const [cardName, setCardName] = useState(\"\")\n    const [nameFontSize, setNameFontSize] = useControllableState({ defaultValue: 32 })\n\n    const [types, setTypes] = useState([])\n    const [superTypes, setSuperTypes] = useState([])\n    const [subTypes, setSubTypes] = useState(\"\")\n    const [typesFontSize, setTypesFontSize] = useControllableState({ defaultValue: 28 })\n\n    const [cardFrameColor, setCardFrame] = useState(\"\")\n\n    const [manaCost, setManaCost] = useState([])\n    // Easier to handle colorless mana on its own. Begin at -1 to display 0 mana artifacts\n    const [colorlessManaAmount, setColorlessManaAmount] = useState(-1)\n\n    const [spellDescription, setSpellDescription] = useState(\"\")\n    const [spellFontSize, setSpellFontSize] = useControllableState({ defaultValue: 22 })\n\n    const [flavorText, setFlavorText] = useState(\"\")\n    const [flavorTextFontSize, setFlavorTextFontSize] = useControllableState({ defaultValue: 21 })\n\n    const [power, setPower] = useState(\"\")\n    const [toughness, setToughness] = useState(\"\")\n    const [ptFontSize, setPTFontSize] = useControllableState({ defaultValue: 34 })\n\n    // clean planeswalker ?\n    const [loyalty, setLoyalty] = useState(\"\")\n\n    return (\n        <ChakraProvider theme={theme} >\n            <SimpleGrid columns={2} h=\"937\" w=\"1920\">\n                <UiPanel setCardName={setCardName} nameFontSize={nameFontSize} setNameFontSize={setNameFontSize}\n                         setImageFileFunction={setImageFile} selectedImageFileName={imageFile.name}\n                         setTypes={setTypes}\n                         setSuperTypes={setSuperTypes} setTypesFontSize={setTypesFontSize} typesFontSize={typesFontSize}\n                         setSubTypes={setSubTypes}\n                         setManaCost={setManaCost} manaCost={manaCost}\n                         setColorlessManaAmount={setColorlessManaAmount} colorlessManaAmount={colorlessManaAmount}\n                         setCardFrame={setCardFrame}\n                         setSpellDescription={setSpellDescription} spellDescription={spellDescription} setSpellFontSize={setSpellFontSize} spellFontSize={spellFontSize}\n                         setFlavorText={setFlavorText} setFlavorTextFontSize={setFlavorTextFontSize} flavorTextFontSize={flavorTextFontSize}\n                         setPower={setPower} setToughness={setToughness} setPTFontSize={setPTFontSize} ptFontSize={ptFontSize}\n                         setLoyalty={setLoyalty}\n                         setImageCentering={setImageCentering}\n                         cardImageRef={cardImageRef}/>\n                <CardImagePanel \n                         imageFile={imageFile} \n                         cardName={cardName} nameFontSize={nameFontSize}\n                         types={types} \n                         superTypes={superTypes} \n                         subTypes={subTypes} typesFontSize={typesFontSize}\n                         manaCost={manaCost}\n                         colorlessManaAmount={colorlessManaAmount}\n                         cardFrameColor={cardFrameColor} \n                         spellDescription={spellDescription} spellFontSize={spellFontSize}\n                         flavorText={flavorText} flavorTextFontSize={flavorTextFontSize}\n                         power={power} toughness={toughness} ptFontSize={ptFontSize}\n                         loyalty={loyalty}\n                         imageCentering={imageCentering}\n                         ref={cardImageRef}/>\n            </SimpleGrid>\n        </ChakraProvider>\n    );\n}\n\nexport { CardGenerator };"]},"metadata":{},"sourceType":"module"}