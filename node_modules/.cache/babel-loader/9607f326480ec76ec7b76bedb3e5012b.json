{"ast":null,"code":"var _jsxFileName = \"C:\\\\Visual Studio Projects\\\\card-generator-tanguy\\\\src\\\\CardGenerator.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; // 1. import `ChakraProvider` component to have chakra work correctly\n\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { SimpleGrid, useControllableState } from \"@chakra-ui/react\";\nimport \"@fontsource/eb-garamond/400.css\";\nimport \"@fontsource/eb-garamond/500.css\";\nimport \"@fontsource/eb-garamond/600.css\";\nimport \"@fontsource/eb-garamond/700.css\";\nimport \"@fontsource/eb-garamond/800.css\";\nimport \"@saeris/typeface-beleren-bold\";\nimport \"mana-font\";\n/***************************************************************/\n\nimport theme from \"./theme\";\nimport { UiPanel } from \"./components/ui_panel\";\nimport { CardImagePanel } from \"./components/card_image_panel\";\n/***************************************************************/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CardGenerator() {\n  _s();\n\n  const [imageFile, setImageFile] = useState({\n    name: \"\",\n    content: \"\"\n  });\n  const [imageCentering, setImageCentering] = useState(\"center\");\n  const [cardName, setCardName] = useState(\"\");\n  const [nameFontSize, setNameFontSize] = useControllableState({\n    defaultValue: 32\n  });\n  const [types, setTypes] = useState([]);\n  const [superTypes, setSuperTypes] = useState([]);\n  const [subTypes, setSubTypes] = useState(\"\");\n  const [typesFontSize, setTypesFontSize] = useControllableState({\n    defaultValue: 28\n  });\n  const [cardFrameColor, setCardFrame] = useState(\"\");\n  const [manaCost, setManaCost] = useState([]); // Easier to handle colorless mana on its own. Begin at -1 to display 0 mana artifacts\n\n  const [colorlessManaAmount, setColorlessManaAmount] = useState(-1);\n  const [spellDescription, setSpellDescription] = useState(\"\");\n  const [spellFontSize, setSpellFontSize] = useControllableState({\n    defaultValue: 28\n  });\n  const [flavorText, setFlavorText] = useState(\"\");\n  const [flavorTextFontSize, setflavorTextFontSize] = useControllableState({\n    defaultValue: 28\n  });\n  const [power, setPower] = useState(\"\");\n  const [toughness, setToughness] = useState(\"\");\n  const [ptFontSize, setPTFontSize] = useControllableState({\n    defaultValue: 28\n  }); // clean planeswalker ?\n\n  const [loyalty, setLoyalty] = useState(\"\");\n  return /*#__PURE__*/_jsxDEV(ChakraProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(SimpleGrid, {\n      columns: 2,\n      h: \"100vh\",\n      w: \"100%\",\n      children: [/*#__PURE__*/_jsxDEV(UiPanel, {\n        setCardName: setCardName,\n        nameFontSize: nameFontSize,\n        setNameFontSize: setNameFontSize,\n        setImageFileFunction: setImageFile,\n        selectedImageFileName: imageFile.name,\n        setTypes: setTypes,\n        setSuperTypes: setSuperTypes,\n        setTypesFontSize: setTypesFontSize,\n        typesFontSize: typesFontSize,\n        setSubTypes: setSubTypes,\n        setManaCost: setManaCost,\n        manaCost: manaCost,\n        setColorlessManaAmount: setColorlessManaAmount,\n        colorlessManaAmount: colorlessManaAmount,\n        setCardFrame: setCardFrame,\n        setSpellDescription: setSpellDescription,\n        spellDescription: spellDescription,\n        setFlavorText: setFlavorText,\n        setPower: setPower,\n        setToughness: setToughness,\n        setLoyalty: setLoyalty,\n        setImageCentering: setImageCentering\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardImagePanel, {\n        imageFile: imageFile,\n        cardName: cardName,\n        nameFontSize: nameFontSize,\n        types: types,\n        superTypes: superTypes,\n        subTypes: subTypes,\n        typesFontSize: typesFontSize,\n        manaCost: manaCost,\n        colorlessManaAmount: colorlessManaAmount,\n        cardFrameColor: cardFrameColor,\n        spellDescription: spellDescription,\n        flavorText: flavorText,\n        power: power,\n        toughness: toughness,\n        loyalty: loyalty,\n        imageCentering: imageCentering\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CardGenerator, \"+csFB8yMq7FGa97+i9S5C2Cb9Rg=\", false, function () {\n  return [useControllableState, useControllableState, useControllableState, useControllableState, useControllableState];\n});\n\n_c = CardGenerator;\nexport { CardGenerator };\n\nvar _c;\n\n$RefreshReg$(_c, \"CardGenerator\");","map":{"version":3,"sources":["C:/Visual Studio Projects/card-generator-tanguy/src/CardGenerator.jsx"],"names":["React","useState","ChakraProvider","SimpleGrid","useControllableState","theme","UiPanel","CardImagePanel","CardGenerator","imageFile","setImageFile","name","content","imageCentering","setImageCentering","cardName","setCardName","nameFontSize","setNameFontSize","defaultValue","types","setTypes","superTypes","setSuperTypes","subTypes","setSubTypes","typesFontSize","setTypesFontSize","cardFrameColor","setCardFrame","manaCost","setManaCost","colorlessManaAmount","setColorlessManaAmount","spellDescription","setSpellDescription","spellFontSize","setSpellFontSize","flavorText","setFlavorText","flavorTextFontSize","setflavorTextFontSize","power","setPower","toughness","setToughness","ptFontSize","setPTFontSize","loyalty","setLoyalty"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n// 1. import `ChakraProvider` component to have chakra work correctly\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport { SimpleGrid, useControllableState } from \"@chakra-ui/react\"\n\nimport \"@fontsource/eb-garamond/400.css\"\nimport \"@fontsource/eb-garamond/500.css\"\nimport \"@fontsource/eb-garamond/600.css\"\nimport \"@fontsource/eb-garamond/700.css\"\nimport \"@fontsource/eb-garamond/800.css\"\nimport \"@saeris/typeface-beleren-bold\"\nimport \"mana-font\"\n\n/***************************************************************/\n\nimport theme from \"./theme\"\nimport { UiPanel } from \"./components/ui_panel\"\nimport { CardImagePanel } from \"./components/card_image_panel\"\n\n/***************************************************************/\nfunction CardGenerator() {\n\n    const [imageFile, setImageFile] = useState({\n        name: \"\",\n        content: \"\"\n    })\n    const [imageCentering, setImageCentering] = useState(\"center\") \n\n    const [cardName, setCardName] = useState(\"\")\n    const [nameFontSize, setNameFontSize] = useControllableState({ defaultValue: 32 })\n\n    const [types, setTypes] = useState([])\n    const [superTypes, setSuperTypes] = useState([])\n    const [subTypes, setSubTypes] = useState(\"\")\n    const [typesFontSize, setTypesFontSize] = useControllableState({ defaultValue: 28 })\n\n    const [cardFrameColor, setCardFrame] = useState(\"\")\n\n    const [manaCost, setManaCost] = useState([])\n    // Easier to handle colorless mana on its own. Begin at -1 to display 0 mana artifacts\n    const [colorlessManaAmount, setColorlessManaAmount] = useState(-1)\n\n    const [spellDescription, setSpellDescription] = useState(\"\")\n    const [spellFontSize, setSpellFontSize] = useControllableState({ defaultValue: 28 })\n\n    const [flavorText, setFlavorText] = useState(\"\")\n    const [flavorTextFontSize, setflavorTextFontSize] = useControllableState({ defaultValue: 28 })\n\n    const [power, setPower] = useState(\"\")\n    const [toughness, setToughness] = useState(\"\")\n    const [ptFontSize, setPTFontSize] = useControllableState({ defaultValue: 28 })\n\n    // clean planeswalker ?\n    const [loyalty, setLoyalty] = useState(\"\")\n\n    return (\n        <ChakraProvider theme={theme} >\n            <SimpleGrid columns={2} h=\"100vh\" w=\"100%\">\n                <UiPanel setCardName={setCardName} nameFontSize={nameFontSize} setNameFontSize={setNameFontSize}\n                         setImageFileFunction={setImageFile} selectedImageFileName={imageFile.name}\n                         setTypes={setTypes}\n                         setSuperTypes={setSuperTypes} setTypesFontSize={setTypesFontSize} typesFontSize={typesFontSize}\n                         setSubTypes={setSubTypes}\n                         setManaCost={setManaCost} manaCost={manaCost}\n                         setColorlessManaAmount={setColorlessManaAmount} colorlessManaAmount={colorlessManaAmount}\n                         setCardFrame={setCardFrame}\n                         setSpellDescription={setSpellDescription} spellDescription={spellDescription}\n                         setFlavorText={setFlavorText}\n                         setPower={setPower}\n                         setToughness={setToughness}\n                         setLoyalty={setLoyalty}\n                         setImageCentering={setImageCentering}/>\n                <CardImagePanel \n                         imageFile={imageFile} \n                         cardName={cardName} nameFontSize={nameFontSize}\n                         types={types} \n                         superTypes={superTypes} \n                         subTypes={subTypes} typesFontSize={typesFontSize}\n                         manaCost={manaCost}\n                         colorlessManaAmount={colorlessManaAmount}\n                         cardFrameColor={cardFrameColor} \n                         spellDescription={spellDescription}\n                         flavorText={flavorText}\n                         power={power}\n                         toughness={toughness}\n                         loyalty={loyalty}\n                         imageCentering={imageCentering}/>\n            </SimpleGrid>\n        </ChakraProvider>\n    );\n}\n\nexport { CardGenerator };"]},"metadata":{},"sourceType":"module"}