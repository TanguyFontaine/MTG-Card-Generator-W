{"ast":null,"code":"var _jsxFileName = \"C:\\\\Visual Studio Projects\\\\card-generator-tanguy\\\\src\\\\components\\\\card_image_panel.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Image, Box, HStack, Heading, useStyleConfig } from \"@chakra-ui/react\";\n/***************************************************************/\n\nimport { Text } from \"../style_components/text\";\nimport blackFrame from \"../ressources/black_frame.png\";\n/***************************************************************/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction fileExtensionIsValid(imageFileName) {\n  const athorizedFileExtensions = [\"png\", \"jpeg\", \"jpg\", \"gif\", \"webp\"];\n  const splitFileName = imageFileName.split('.');\n  return athorizedFileExtensions.some(ext => ext === splitFileName[splitFileName.length - 1].toLowerCase());\n}\n\nfunction DisplayImage(props) {\n  const imageFileName = props.imageFileName;\n  const imageFileContent = props.imageFileContent; // Do not display the error panel while an image has not been selected\n\n  if (imageFileName === \"\" || fileExtensionIsValid(imageFileName)) {\n    return /*#__PURE__*/_jsxDEV(Image, {\n      alt: imageFileName,\n      src: imageFileContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Invalid image file : supported extensions are png, jpg, jpeg, gif, webp\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 13\n  }, this);\n}\n\n_c = DisplayImage;\nexport function CardImagePanel(props) {\n  _s();\n\n  const name = props.cardName;\n  const imageFileContent = props.imageFile.content;\n  const imageFileName = props.imageFile.name;\n  const types = props.types;\n  const superTypes = props.superTypes;\n  const subTypes = props.subTypes;\n  const chosenCardFrame = props.cardFrame;\n  const spellDescription = props.spellDescription;\n  const flavorText = props.flavorText;\n  const power = props.power;\n  const toughness = props.toughness;\n  const loyalty = props.loyalty;\n  const typesItems = types.map(type => /*#__PURE__*/_jsxDEV(Text, {\n    children: type\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 44\n  }, this));\n  const superTypesItems = superTypes.map(superTypes => /*#__PURE__*/_jsxDEV(Text, {\n    children: superTypes\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 60\n  }, this));\n  const style = useStyleConfig(\"CardImagePanel\");\n  return /*#__PURE__*/_jsxDEV(Box, {\n    __css: style,\n    bg: \"blue.800\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      name: \"cardFrame\",\n      children: [/*#__PURE__*/_jsxDEV(Image, {\n        mt: 3,\n        ml: 3,\n        src: blackFrame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        pos: \"absolute\",\n        top: \"5%\",\n        left: \"55%\",\n        fontSize: 40,\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      name: \"other information\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        children: [\"Card name : \", name, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(HStack, {\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: \"types :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 33\n        }, this), typesItems]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(HStack, {\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: \"super types :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 33\n        }, this), superTypesItems]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        children: [\"Sub types : \", subTypes, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        children: [\"Card frame : \", chosenCardFrame, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        children: [\"Abilities : \", spellDescription, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        children: [\"Flavor text : \", flavorText, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        children: [\"Power : \", power, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        children: [\"Toughness : \", toughness, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        children: [\"Loyalty : \", loyalty, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DisplayImage, {\n        imageFileName: imageFileName,\n        imageFileContent: imageFileContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CardImagePanel, \"pl7GAhqelQYC2Y8gxFE2LPD7C/o=\", false, function () {\n  return [useStyleConfig];\n});\n\n_c2 = CardImagePanel;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DisplayImage\");\n$RefreshReg$(_c2, \"CardImagePanel\");","map":{"version":3,"sources":["C:/Visual Studio Projects/card-generator-tanguy/src/components/card_image_panel.jsx"],"names":["React","Image","Box","HStack","Heading","useStyleConfig","Text","blackFrame","fileExtensionIsValid","imageFileName","athorizedFileExtensions","splitFileName","split","some","ext","length","toLowerCase","DisplayImage","props","imageFileContent","CardImagePanel","name","cardName","imageFile","content","types","superTypes","subTypes","chosenCardFrame","cardFrame","spellDescription","flavorText","power","toughness","loyalty","typesItems","map","type","superTypesItems","style"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Image, Box, HStack, Heading, useStyleConfig } from \"@chakra-ui/react\"\r\n/***************************************************************/\r\n\r\nimport { Text } from \"../style_components/text\"\r\nimport blackFrame from \"../ressources/black_frame.png\" \r\n\r\n/***************************************************************/\r\n\r\nfunction fileExtensionIsValid(imageFileName) {\r\n\r\n    const athorizedFileExtensions = [\"png\", \"jpeg\", \"jpg\", \"gif\", \"webp\"]\r\n\r\n    const splitFileName = imageFileName.split('.')\r\n    return (athorizedFileExtensions.some(ext =>(ext === splitFileName[splitFileName.length - 1].toLowerCase())));\r\n  }\r\n\r\n\r\n\r\nfunction DisplayImage(props) {\r\n    const imageFileName = props.imageFileName\r\n    const imageFileContent = props.imageFileContent\r\n\r\n    // Do not display the error panel while an image has not been selected\r\n    if (imageFileName === \"\" || fileExtensionIsValid(imageFileName)) {\r\n        return (\r\n            <Image alt={imageFileName} src={imageFileContent}></Image>\r\n        );\r\n    }\r\n    return (<div>Invalid image file : supported extensions are png, jpg, jpeg, gif, webp</div>);\r\n}\r\n\r\n\r\nexport function CardImagePanel(props) {\r\n\r\n    const name = props.cardName\r\n    const imageFileContent = props.imageFile.content\r\n    const imageFileName = props.imageFile.name\r\n    const types = props.types\r\n    const superTypes = props.superTypes\r\n    const subTypes = props.subTypes\r\n    const chosenCardFrame = props.cardFrame\r\n    const spellDescription = props.spellDescription\r\n    const flavorText = props.flavorText\r\n    const power = props.power\r\n    const toughness = props.toughness\r\n    const loyalty = props.loyalty\r\n\r\n    const typesItems = types.map((type) => <Text>{type}</Text>);\r\n    const superTypesItems = superTypes.map((superTypes) => <Text>{superTypes}</Text>);\r\n\r\n    const style = useStyleConfig(\"CardImagePanel\")\r\n\r\n    return (\r\n        <Box __css={style} bg=\"blue.800\">\r\n            <Box name=\"cardFrame\">\r\n                <Image mt={3} ml={3} src={blackFrame}/>\r\n                <Text pos=\"absolute\" top=\"5%\" left=\"55%\" fontSize={40}>{name}</Text>\r\n            </Box>\r\n            <Box name=\"other information\">\r\n            <Text>Card name : {name} </Text>\r\n            <HStack spacing={2}><Text>types :</Text>{typesItems}</HStack>\r\n            <HStack spacing={2}><Text>super types :</Text>{superTypesItems}</HStack>\r\n            <Text>Sub types : {subTypes} </Text>\r\n            <Text>Card frame : {chosenCardFrame} </Text>\r\n            <Text>Abilities : {spellDescription} </Text>\r\n            <Text>Flavor text : {flavorText} </Text>\r\n            <Text>Power : {power} </Text>\r\n            <Text>Toughness : {toughness} </Text>\r\n            <Text>Loyalty : {loyalty} </Text>\r\n            <DisplayImage imageFileName={imageFileName} imageFileContent={imageFileContent}></DisplayImage>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}