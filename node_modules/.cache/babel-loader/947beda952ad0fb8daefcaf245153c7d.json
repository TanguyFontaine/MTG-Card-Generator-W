{"ast":null,"code":"const inlineStyles = target => {\n  const selfCopyCss = elt => {\n    const computed = window.getComputedStyle(elt);\n    const css = {};\n\n    for (let i = 0; i < computed.length; i++) {\n      css[computed[i]] = computed.getPropertyValue(computed[i]);\n    }\n\n    for (const key in css) {\n      elt.style[key] = css[key];\n    }\n\n    return css;\n  };\n\n  const root = document.querySelector(target);\n  selfCopyCss(root);\n  root.querySelectorAll('*').forEach(elt => selfCopyCss(elt));\n}; // inline styles\n\n\nconst copyToCanvas = ({\n  target,\n  scale,\n  format,\n  quality\n}) => {\n  var svg = document.querySelector(target);\n  var svgData = new XMLSerializer().serializeToString(svg);\n  var canvas = document.createElement('canvas');\n  var svgSize = svg.getBoundingClientRect(); //Resize can break shadows\n\n  canvas.width = svgSize.width * scale;\n  canvas.height = svgSize.height * scale;\n  canvas.style.width = svgSize.width;\n  canvas.style.height = svgSize.height;\n  var ctxt = canvas.getContext('2d');\n  ctxt.scale(scale, scale);\n  var img = document.createElement('img');\n  img.setAttribute('src', 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgData))));\n  return new Promise(resolve => {\n    img.onload = () => {\n      ctxt.drawImage(img, 0, 0);\n      const file = canvas.toDataURL(`image/${format}`, format = 'png', quality);\n      resolve(file);\n    };\n  });\n};\n\nconst downloadImage = ({\n  file,\n  name,\n  format\n}) => {\n  var a = document.createElement('a');\n  a.className = \"display-none\";\n  a.download = `${name}.${format}`;\n  a.href = file;\n  document.body.appendChild(a);\n  a.click();\n}; // module.exports \n\n\nmodule.exports = async (target, name, {\n  scale = 1,\n  format = 'png',\n  quality = 0.92,\n  download = true,\n  ignore = null\n} = {}) => {\n  const elt = document.querySelector(target); //Remember all HTML, as we will modify the styles\n\n  const rememberHTML = elt.innerHTML; //Remove unwanted elements\n\n  if (ignore != null) {\n    const elt = document.querySelector(ignore);\n    elt.parentNode.removeChild(elt);\n  } //Set all the css styles inline\n\n\n  inlineStyles(target, ignore); //Copy all html to a new canvas\n\n  return await copyToCanvas({\n    target,\n    scale,\n    format,\n    quality\n  }).then(file => {\n    //Download if necessary\n    if (download) downloadImage({\n      file,\n      name,\n      format\n    }); //Undo the changes to inline styles\n\n    elt.innerHTML = rememberHTML;\n    return file;\n  }).catch(console.error);\n};","map":{"version":3,"sources":["C:/Visual Studio Projects/card-generator-tanguy/node_modules/react-svg-to-image/index.js"],"names":["inlineStyles","target","selfCopyCss","elt","computed","window","getComputedStyle","css","i","length","getPropertyValue","key","style","root","document","querySelector","querySelectorAll","forEach","copyToCanvas","scale","format","quality","svg","svgData","XMLSerializer","serializeToString","canvas","createElement","svgSize","getBoundingClientRect","width","height","ctxt","getContext","img","setAttribute","btoa","unescape","encodeURIComponent","Promise","resolve","onload","drawImage","file","toDataURL","downloadImage","name","a","className","download","href","body","appendChild","click","module","exports","ignore","rememberHTML","innerHTML","parentNode","removeChild","then","catch","console","error"],"mappings":"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","sourcesContent":["const inlineStyles = target => {\n  const selfCopyCss = elt => {\n    const computed = window.getComputedStyle(elt);\n    const css = {};\n    for (let i = 0; i < computed.length; i++) {\n      css[computed[i]] = computed.getPropertyValue(computed[i]);\n    }\n\n    for (const key in css) {\n      elt.style[key] = css[key];\n    }\n    return css;\n  };\n\n  const root = document.querySelector(target);\n  selfCopyCss(root);\n  root.querySelectorAll('*').forEach(elt => selfCopyCss(elt));\n}; // inline styles\n\nconst copyToCanvas = ({ target, scale, format, quality }) => {\n  var svg = document.querySelector(target);\n  var svgData = new XMLSerializer().serializeToString(svg);\n  var canvas = document.createElement('canvas');\n  var svgSize = svg.getBoundingClientRect();\n\n  //Resize can break shadows\n  canvas.width = svgSize.width * scale;\n  canvas.height = svgSize.height * scale;\n  canvas.style.width = svgSize.width;\n  canvas.style.height = svgSize.height;\n\n  var ctxt = canvas.getContext('2d');\n  ctxt.scale(scale, scale);\n\n  var img = document.createElement('img');\n  img.setAttribute('src', 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgData))));\n  return new Promise(resolve => {\n    img.onload = () => {\n      ctxt.drawImage(img, 0, 0);\n      const file = canvas.toDataURL(`image/${format}`, (format = 'png'), quality);\n      resolve(file);\n    };\n  });\n};\n\nconst downloadImage = ({ file, name, format }) => {\n  var a = document.createElement('a');\n  a.className = \"display-none\";\n  a.download = `${name}.${format}`;\n  a.href = file;\n  document.body.appendChild(a);\n  a.click();\n};\n\n// module.exports \n\nmodule.exports = async (target, name, { scale = 1, format = 'png', quality = 0.92, download = true, ignore = null } = {}) => {\n  const elt = document.querySelector(target);\n  //Remember all HTML, as we will modify the styles\n  const rememberHTML = elt.innerHTML;\n\n  //Remove unwanted elements\n  if (ignore != null) {\n    const elt = document.querySelector(ignore);\n    elt.parentNode.removeChild(elt);\n  }\n\n  //Set all the css styles inline\n  inlineStyles(target, ignore);\n\n  //Copy all html to a new canvas\n  return await copyToCanvas({\n    target,\n    scale,\n    format,\n    quality\n  })\n    .then(file => {\n      //Download if necessary\n      if (download) downloadImage({ file, name, format });\n      //Undo the changes to inline styles\n      elt.innerHTML = rememberHTML;\n      return file;\n    })\n    .catch(console.error);\n};"]},"metadata":{},"sourceType":"script"}