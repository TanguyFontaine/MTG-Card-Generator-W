{"ast":null,"code":"var _jsxFileName = \"C:\\\\Visual Studio Projects\\\\card-generator-tanguy\\\\src\\\\CardGenerator.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { createRef, useState } from 'react'; // 1. import `ChakraProvider` component to have chakra work correctly\n\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { SimpleGrid, useControllableState } from \"@chakra-ui/react\";\nimport \"@fontsource/eb-garamond/400.css\";\nimport \"@fontsource/eb-garamond/500.css\";\nimport \"@fontsource/eb-garamond/600.css\";\nimport \"@fontsource/eb-garamond/700.css\";\nimport \"@fontsource/eb-garamond/800.css\";\nimport \"@saeris/typeface-beleren-bold\";\nimport \"mana-font\";\n/***************************************************************/\n\nimport theme from \"./theme\";\nimport { UiPanel } from \"./components/ui_panel\";\nimport { CardImagePanel } from \"./components/card_image_panel\";\n/***************************************************************/\n\n/*function CardGenerator() {\r\n\r\n    const [imageFile, setImageFile] = useState({\r\n        name: \"\",\r\n        content: \"\"\r\n    })\r\n    const [imageCentering, setImageCentering] = useState(\"center\") \r\n\r\n    const [cardName, setCardName] = useState(\"\")\r\n    const [nameFontSize, setNameFontSize] = useControllableState({ defaultValue: 32 })\r\n\r\n    const [types, setTypes] = useState([])\r\n    const [superTypes, setSuperTypes] = useState([])\r\n    const [subTypes, setSubTypes] = useState(\"\")\r\n    const [typesFontSize, setTypesFontSize] = useControllableState({ defaultValue: 28 })\r\n\r\n    const [cardFrameColor, setCardFrame] = useState(\"\")\r\n\r\n    const [manaCost, setManaCost] = useState([])\r\n    // Easier to handle colorless mana on its own. Begin at -1 to display 0 mana artifacts\r\n    const [colorlessManaAmount, setColorlessManaAmount] = useState(-1)\r\n\r\n    const [spellDescription, setSpellDescription] = useState(\"\")\r\n    const [spellFontSize, setSpellFontSize] = useControllableState({ defaultValue: 22 })\r\n\r\n    const [flavorText, setFlavorText] = useState(\"\")\r\n    const [flavorTextFontSize, setFlavorTextFontSize] = useControllableState({ defaultValue: 21 })\r\n\r\n    const [power, setPower] = useState(\"\")\r\n    const [toughness, setToughness] = useState(\"\")\r\n    const [ptFontSize, setPTFontSize] = useControllableState({ defaultValue: 34 })\r\n\r\n    // clean planeswalker ?\r\n    const [loyalty, setLoyalty] = useState(\"\")\r\n\r\n    return (\r\n        <ChakraProvider theme={theme} >\r\n            <SimpleGrid columns={2} h=\"100vh\" w=\"100%\">\r\n                <UiPanel setCardName={setCardName} nameFontSize={nameFontSize} setNameFontSize={setNameFontSize}\r\n                         setImageFileFunction={setImageFile} selectedImageFileName={imageFile.name}\r\n                         setTypes={setTypes}\r\n                         setSuperTypes={setSuperTypes} setTypesFontSize={setTypesFontSize} typesFontSize={typesFontSize}\r\n                         setSubTypes={setSubTypes}\r\n                         setManaCost={setManaCost} manaCost={manaCost}\r\n                         setColorlessManaAmount={setColorlessManaAmount} colorlessManaAmount={colorlessManaAmount}\r\n                         setCardFrame={setCardFrame}\r\n                         setSpellDescription={setSpellDescription} spellDescription={spellDescription} setSpellFontSize={setSpellFontSize} spellFontSize={spellFontSize}\r\n                         setFlavorText={setFlavorText} setFlavorTextFontSize={setFlavorTextFontSize} flavorTextFontSize={flavorTextFontSize}\r\n                         setPower={setPower} setToughness={setToughness} setPTFontSize={setPTFontSize} ptFontSize={ptFontSize}\r\n                         setLoyalty={setLoyalty}\r\n                         setImageCentering={setImageCentering}/>\r\n                <CardImagePanel \r\n                         imageFile={imageFile} \r\n                         cardName={cardName} nameFontSize={nameFontSize}\r\n                         types={types} \r\n                         superTypes={superTypes} \r\n                         subTypes={subTypes} typesFontSize={typesFontSize}\r\n                         manaCost={manaCost}\r\n                         colorlessManaAmount={colorlessManaAmount}\r\n                         cardFrameColor={cardFrameColor} \r\n                         spellDescription={spellDescription} spellFontSize={spellFontSize}\r\n                         flavorText={flavorText} flavorTextFontSize={flavorTextFontSize}\r\n                         power={power} toughness={toughness} ptFontSize={ptFontSize}\r\n                         loyalty={loyalty}\r\n                         imageCentering={imageCentering}/>\r\n            </SimpleGrid>\r\n        </ChakraProvider>\r\n    );\r\n}\r\n\r\nexport { CardGenerator };*/\n\n/**********   TEST SCREENSHOT 1 ****************/\n\n/*import {ScreenCapture} from 'react-screen-capture'\r\n\r\nexport class CardGenerator extends React.Component {\r\n    state = {\r\n      screenCapture: '',\r\n    };\r\n  \r\n    handleScreenCapture = screenCapture => {\r\n      this.setState({screenCapture});\r\n    };\r\n  \r\n    handleSave = () => {\r\n      const screenCaptureSource = this.state.screenCapture;\r\n      const downloadLink = document.createElement('a');\r\n      const fileName = 'react-screen-capture.png';\r\n  \r\n      downloadLink.href = screenCaptureSource;\r\n      downloadLink.download = fileName;\r\n      downloadLink.click();\r\n    };\r\n  \r\n    render() {\r\n      const { screenCapture } = this.state;\r\n  \r\n      return (\r\n        <ScreenCapture startX={100} startY={100} endX={300} endY={300} on={true} onEndCapture={this.handleScreenCapture}>\r\n          {({ onStartCapture }) => (\r\n            <div>\r\n              <button onClick={onStartCapture}>Capture</button>\r\n              <p>\r\n                Lorem ipsum dolor sit amet consectetur adipisicing elit. Quibusdam\r\n                distinctio exercitationem a tempore delectus ducimus necessitatibus\r\n                dolor voluptatum aut est quaerat aspernatur, vero quod aperiam odio.\r\n                Exercitationem distinctio in voluptates?\r\n              </p>\r\n              <p>\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Ut molestiae\r\n                deserunt voluptas, labore a expedita error eligendi sunt fugit, nesciunt\r\n                ullam corrupti quas natus, officia rerum? Officia cum amet quidem.\r\n              </p>\r\n              <p>\r\n                Lorem ipsum dolor sit, amet consectetur adipisicing elit. Quaerat, iusto\r\n                repellat quae quos in rerum sunt obcaecati provident placeat hic saepe\r\n                possimus eaque repellendus consequuntur quisquam nihil, sit ullam\r\n                ratione.\r\n              </p>\r\n              <center>\r\n                <img src={screenCapture} alt='react-screen-capture' />\r\n                <p>\r\n                  {screenCapture && <button onClick={this.handleSave}>Download</button>}\r\n                </p>\r\n              </center>\r\n            </div>\r\n          )}\r\n        </ScreenCapture>\r\n      );\r\n    }\r\n  };\r\n  */\n\n/**********   TEST SCREENSHOT 2 ****************/\n\nimport { useScreenshot } from 'use-react-screenshot';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CardGenerator() {\n  _s();\n\n  const ref = /*#__PURE__*/createRef(null);\n  const [image, takeScreenshot] = useScreenshot();\n\n  const getImage = () => takeScreenshot(ref.current);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          marginBottom: '10px'\n        },\n        onClick: getImage,\n        children: \"Take screenshot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      width: 1800,\n      src: image,\n      alt: 'Screenshot'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: ref,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"use-react-screenshot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"hook by @vre2h which allows to create screenshots\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CardGenerator, \"vNhgPjk34gQ0xiTQVe34yhMg4GE=\", false, function () {\n  return [useScreenshot];\n});\n\n_c = CardGenerator;\nexport { CardGenerator };\n\nvar _c;\n\n$RefreshReg$(_c, \"CardGenerator\");","map":{"version":3,"sources":["C:/Visual Studio Projects/card-generator-tanguy/src/CardGenerator.jsx"],"names":["React","createRef","useState","ChakraProvider","SimpleGrid","useControllableState","theme","UiPanel","CardImagePanel","useScreenshot","CardGenerator","ref","image","takeScreenshot","getImage","current","marginBottom"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAA0C,OAA1C,C,CACA;;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,EAAqBC,oBAArB,QAAiD,kBAAjD;AAEA,OAAO,iCAAP;AACA,OAAO,iCAAP;AACA,OAAO,iCAAP;AACA,OAAO,iCAAP;AACA,OAAO,iCAAP;AACA,OAAO,+BAAP;AACA,OAAO,WAAP;AAEA;;AAEA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,cAAT,QAA+B,+BAA/B;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA,SAASC,aAAT,QAA8B,sBAA9B;;;AAEA,SAASC,aAAT,GAA0B;AAAA;;AACxB,QAAMC,GAAG,gBAAGV,SAAS,CAAC,IAAD,CAArB;AACA,QAAM,CAACW,KAAD,EAAQC,cAAR,IAA0BJ,aAAa,EAA7C;;AACA,QAAMK,QAAQ,GAAG,MAAMD,cAAc,CAACF,GAAG,CAACI,OAAL,CAArC;;AACA,sBACE;AAAA,4BACE;AAAA,6BACE;AAAQ,QAAA,KAAK,EAAE;AAAEC,UAAAA,YAAY,EAAE;AAAhB,SAAf;AAAyC,QAAA,OAAO,EAAEF,QAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAK,MAAA,KAAK,EAAE,IAAZ;AAAkB,MAAA,GAAG,EAAEF,KAAvB;AAA8B,MAAA,GAAG,EAAE;AAAnC;AAAA;AAAA;AAAA;AAAA,YANF,eAOE;AAAK,MAAA,GAAG,EAAED,GAAV;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,+BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GApBQD,a;UAEyBD,a;;;KAFzBC,a;AAsBT,SAASA,aAAT","sourcesContent":["import React, {createRef, useState } from 'react';\r\n// 1. import `ChakraProvider` component to have chakra work correctly\r\nimport { ChakraProvider } from \"@chakra-ui/react\"\r\nimport { SimpleGrid, useControllableState } from \"@chakra-ui/react\"\r\n\r\nimport \"@fontsource/eb-garamond/400.css\"\r\nimport \"@fontsource/eb-garamond/500.css\"\r\nimport \"@fontsource/eb-garamond/600.css\"\r\nimport \"@fontsource/eb-garamond/700.css\"\r\nimport \"@fontsource/eb-garamond/800.css\"\r\nimport \"@saeris/typeface-beleren-bold\"\r\nimport \"mana-font\"\r\n\r\n/***************************************************************/\r\n\r\nimport theme from \"./theme\"\r\nimport { UiPanel } from \"./components/ui_panel\"\r\nimport { CardImagePanel } from \"./components/card_image_panel\"\r\n\r\n/***************************************************************/\r\n/*function CardGenerator() {\r\n\r\n    const [imageFile, setImageFile] = useState({\r\n        name: \"\",\r\n        content: \"\"\r\n    })\r\n    const [imageCentering, setImageCentering] = useState(\"center\") \r\n\r\n    const [cardName, setCardName] = useState(\"\")\r\n    const [nameFontSize, setNameFontSize] = useControllableState({ defaultValue: 32 })\r\n\r\n    const [types, setTypes] = useState([])\r\n    const [superTypes, setSuperTypes] = useState([])\r\n    const [subTypes, setSubTypes] = useState(\"\")\r\n    const [typesFontSize, setTypesFontSize] = useControllableState({ defaultValue: 28 })\r\n\r\n    const [cardFrameColor, setCardFrame] = useState(\"\")\r\n\r\n    const [manaCost, setManaCost] = useState([])\r\n    // Easier to handle colorless mana on its own. Begin at -1 to display 0 mana artifacts\r\n    const [colorlessManaAmount, setColorlessManaAmount] = useState(-1)\r\n\r\n    const [spellDescription, setSpellDescription] = useState(\"\")\r\n    const [spellFontSize, setSpellFontSize] = useControllableState({ defaultValue: 22 })\r\n\r\n    const [flavorText, setFlavorText] = useState(\"\")\r\n    const [flavorTextFontSize, setFlavorTextFontSize] = useControllableState({ defaultValue: 21 })\r\n\r\n    const [power, setPower] = useState(\"\")\r\n    const [toughness, setToughness] = useState(\"\")\r\n    const [ptFontSize, setPTFontSize] = useControllableState({ defaultValue: 34 })\r\n\r\n    // clean planeswalker ?\r\n    const [loyalty, setLoyalty] = useState(\"\")\r\n\r\n    return (\r\n        <ChakraProvider theme={theme} >\r\n            <SimpleGrid columns={2} h=\"100vh\" w=\"100%\">\r\n                <UiPanel setCardName={setCardName} nameFontSize={nameFontSize} setNameFontSize={setNameFontSize}\r\n                         setImageFileFunction={setImageFile} selectedImageFileName={imageFile.name}\r\n                         setTypes={setTypes}\r\n                         setSuperTypes={setSuperTypes} setTypesFontSize={setTypesFontSize} typesFontSize={typesFontSize}\r\n                         setSubTypes={setSubTypes}\r\n                         setManaCost={setManaCost} manaCost={manaCost}\r\n                         setColorlessManaAmount={setColorlessManaAmount} colorlessManaAmount={colorlessManaAmount}\r\n                         setCardFrame={setCardFrame}\r\n                         setSpellDescription={setSpellDescription} spellDescription={spellDescription} setSpellFontSize={setSpellFontSize} spellFontSize={spellFontSize}\r\n                         setFlavorText={setFlavorText} setFlavorTextFontSize={setFlavorTextFontSize} flavorTextFontSize={flavorTextFontSize}\r\n                         setPower={setPower} setToughness={setToughness} setPTFontSize={setPTFontSize} ptFontSize={ptFontSize}\r\n                         setLoyalty={setLoyalty}\r\n                         setImageCentering={setImageCentering}/>\r\n                <CardImagePanel \r\n                         imageFile={imageFile} \r\n                         cardName={cardName} nameFontSize={nameFontSize}\r\n                         types={types} \r\n                         superTypes={superTypes} \r\n                         subTypes={subTypes} typesFontSize={typesFontSize}\r\n                         manaCost={manaCost}\r\n                         colorlessManaAmount={colorlessManaAmount}\r\n                         cardFrameColor={cardFrameColor} \r\n                         spellDescription={spellDescription} spellFontSize={spellFontSize}\r\n                         flavorText={flavorText} flavorTextFontSize={flavorTextFontSize}\r\n                         power={power} toughness={toughness} ptFontSize={ptFontSize}\r\n                         loyalty={loyalty}\r\n                         imageCentering={imageCentering}/>\r\n            </SimpleGrid>\r\n        </ChakraProvider>\r\n    );\r\n}\r\n\r\nexport { CardGenerator };*/\r\n\r\n\r\n/**********   TEST SCREENSHOT 1 ****************/\r\n/*import {ScreenCapture} from 'react-screen-capture'\r\n\r\nexport class CardGenerator extends React.Component {\r\n    state = {\r\n      screenCapture: '',\r\n    };\r\n  \r\n    handleScreenCapture = screenCapture => {\r\n      this.setState({screenCapture});\r\n    };\r\n  \r\n    handleSave = () => {\r\n      const screenCaptureSource = this.state.screenCapture;\r\n      const downloadLink = document.createElement('a');\r\n      const fileName = 'react-screen-capture.png';\r\n  \r\n      downloadLink.href = screenCaptureSource;\r\n      downloadLink.download = fileName;\r\n      downloadLink.click();\r\n    };\r\n  \r\n    render() {\r\n      const { screenCapture } = this.state;\r\n  \r\n      return (\r\n        <ScreenCapture startX={100} startY={100} endX={300} endY={300} on={true} onEndCapture={this.handleScreenCapture}>\r\n          {({ onStartCapture }) => (\r\n            <div>\r\n              <button onClick={onStartCapture}>Capture</button>\r\n              <p>\r\n                Lorem ipsum dolor sit amet consectetur adipisicing elit. Quibusdam\r\n                distinctio exercitationem a tempore delectus ducimus necessitatibus\r\n                dolor voluptatum aut est quaerat aspernatur, vero quod aperiam odio.\r\n                Exercitationem distinctio in voluptates?\r\n              </p>\r\n              <p>\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Ut molestiae\r\n                deserunt voluptas, labore a expedita error eligendi sunt fugit, nesciunt\r\n                ullam corrupti quas natus, officia rerum? Officia cum amet quidem.\r\n              </p>\r\n              <p>\r\n                Lorem ipsum dolor sit, amet consectetur adipisicing elit. Quaerat, iusto\r\n                repellat quae quos in rerum sunt obcaecati provident placeat hic saepe\r\n                possimus eaque repellendus consequuntur quisquam nihil, sit ullam\r\n                ratione.\r\n              </p>\r\n              <center>\r\n                <img src={screenCapture} alt='react-screen-capture' />\r\n                <p>\r\n                  {screenCapture && <button onClick={this.handleSave}>Download</button>}\r\n                </p>\r\n              </center>\r\n            </div>\r\n          )}\r\n        </ScreenCapture>\r\n      );\r\n    }\r\n  };\r\n  */\r\n\r\n/**********   TEST SCREENSHOT 2 ****************/\r\nimport { useScreenshot } from 'use-react-screenshot'\r\n\r\nfunction CardGenerator () {\r\n  const ref = createRef(null)\r\n  const [image, takeScreenshot] = useScreenshot()\r\n  const getImage = () => takeScreenshot(ref.current)\r\n  return (\r\n    <div>\r\n      <div>\r\n        <button style={{ marginBottom: '10px' }} onClick={getImage}>\r\n          Take screenshot\r\n        </button>\r\n      </div>\r\n      <img width={1800} src={image} alt={'Screenshot'} />\r\n      <div ref={ref}>\r\n        <h1>use-react-screenshot</h1>\r\n        <p>\r\n          <strong>hook by @vre2h which allows to create screenshots</strong>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { CardGenerator }"]},"metadata":{},"sourceType":"module"}