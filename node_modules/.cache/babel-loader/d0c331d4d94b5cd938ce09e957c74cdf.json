{"ast":null,"code":"var _jsxFileName = \"C:\\\\Visual Studio Projects\\\\card-generator-tanguy\\\\src\\\\CardGenerator.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; // 1. import `ChakraProvider` component to have chakra work correctly\n\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { SimpleGrid } from \"@chakra-ui/react\";\nimport \"@fontsource/eb-garamond/400.css\";\nimport \"@fontsource/eb-garamond/500.css\";\nimport \"@fontsource/eb-garamond/600.css\";\nimport \"@fontsource/eb-garamond/700.css\";\nimport \"@fontsource/eb-garamond/800.css\";\nimport \"@saeris/typeface-beleren-bold\";\nimport \"mana-font\";\n/***************************************************************/\n\nimport theme from \"./theme\";\nimport { UiPanel } from \"./components/ui_panel\";\nimport { CardImagePanel } from \"./components/card_image_panel\";\n/***************************************************************/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CardGenerator() {\n  _s();\n\n  const [imageFile, setImageFile] = useState({\n    name: \"\",\n    content: \"\"\n  });\n  const [cardName, setCardName] = useState(\"\");\n  const [types, setTypes] = useState([]);\n  const [superTypes, setSuperTypes] = useState([]);\n  const [subTypes, setSubTypes] = useState(\"\");\n  const [cardFrameColor, setCardFrame] = useState(\"\");\n  const [manaCost, setManaCost] = useState([]);\n  const [colorlessManaAmount, setColorlessManaAmount] = useState(0);\n  const [spellDescription, setSpellDescription] = useState(\"\");\n  const [flavorText, setFlavorText] = useState(\"\");\n  const [power, setPower] = useState(\"\");\n  const [toughness, setToughness] = useState(\"\"); // clean planeswalker ?\n\n  const [loyalty, setLoyalty] = useState(\"\");\n  return /*#__PURE__*/_jsxDEV(ChakraProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(SimpleGrid, {\n      columns: 2,\n      h: \"100vh\",\n      w: \"100%\",\n      children: [/*#__PURE__*/_jsxDEV(UiPanel, {\n        setCardName: name => setCardName(name),\n        setImageFileFunction: file => setImageFile(file),\n        selectedImageFileName: imageFile.name,\n        setTypes: types => setTypes(types),\n        setSuperTypes: superTypes => setSuperTypes(superTypes),\n        setSubTypes: subTypes => setSubTypes(subTypes),\n        setManaCost: manaCost => setManaCost(manaCost),\n        manaCost: manaCost,\n        setCardFrame: cardFrame => setCardFrame(cardFrame),\n        setSpellDescription: spellDescription => setSpellDescription(spellDescription),\n        setFlavorText: flavorText => setFlavorText(flavorText),\n        setPower: power => setPower(power),\n        setToughness: toughness => setToughness(toughness),\n        setLoyalty: loyalty => setLoyalty(loyalty)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardImagePanel, {\n        imageFile: imageFile,\n        cardName: cardName,\n        types: types,\n        superTypes: superTypes,\n        subTypes: subTypes,\n        manaCost: manaCost,\n        cardFrameColor: cardFrameColor,\n        spellDescription: spellDescription,\n        flavorText: flavorText,\n        power: power,\n        toughness: toughness,\n        loyalty: loyalty\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CardGenerator, \"BKtjul3uJYBWUr/alA3S2cZs6/Q=\");\n\n_c = CardGenerator;\nexport { CardGenerator };\n\nvar _c;\n\n$RefreshReg$(_c, \"CardGenerator\");","map":{"version":3,"sources":["C:/Visual Studio Projects/card-generator-tanguy/src/CardGenerator.jsx"],"names":["React","useState","ChakraProvider","SimpleGrid","theme","UiPanel","CardImagePanel","CardGenerator","imageFile","setImageFile","name","content","cardName","setCardName","types","setTypes","superTypes","setSuperTypes","subTypes","setSubTypes","cardFrameColor","setCardFrame","manaCost","setManaCost","colorlessManaAmount","setColorlessManaAmount","spellDescription","setSpellDescription","flavorText","setFlavorText","power","setPower","toughness","setToughness","loyalty","setLoyalty","file","cardFrame"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n// 1. import `ChakraProvider` component to have chakra work correctly\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport { SimpleGrid } from \"@chakra-ui/react\"\n\nimport \"@fontsource/eb-garamond/400.css\"\nimport \"@fontsource/eb-garamond/500.css\"\nimport \"@fontsource/eb-garamond/600.css\"\nimport \"@fontsource/eb-garamond/700.css\"\nimport \"@fontsource/eb-garamond/800.css\"\nimport \"@saeris/typeface-beleren-bold\"\nimport \"mana-font\"\n\n/***************************************************************/\n\nimport theme from \"./theme\"\nimport { UiPanel } from \"./components/ui_panel\"\nimport { CardImagePanel } from \"./components/card_image_panel\"\n\n/***************************************************************/\nfunction CardGenerator() {\n\n    const [imageFile, setImageFile] = useState({\n        name: \"\",\n        content: \"\"\n    })\n\n    const [cardName, setCardName] = useState(\"\")\n\n    const [types, setTypes] = useState([])\n\n    const [superTypes, setSuperTypes] = useState([])\n\n    const [subTypes, setSubTypes] = useState(\"\")\n\n    const [cardFrameColor, setCardFrame] = useState(\"\")\n\n    const [manaCost, setManaCost] = useState([])\n    const [colorlessManaAmount, setColorlessManaAmount] = useState(0)\n\n    const [spellDescription, setSpellDescription] = useState(\"\")\n\n    const [flavorText, setFlavorText] = useState(\"\")\n\n    const [power, setPower] = useState(\"\")\n\n    const [toughness, setToughness] = useState(\"\")\n\n    // clean planeswalker ?\n    const [loyalty, setLoyalty] = useState(\"\")\n\n    return (\n        <ChakraProvider theme={theme} >\n            <SimpleGrid columns={2} h=\"100vh\" w=\"100%\">\n                <UiPanel setCardName={(name) => setCardName(name)} \n                         setImageFileFunction={(file) => setImageFile(file)} selectedImageFileName={imageFile.name}\n                         setTypes={(types) => setTypes(types)}\n                         setSuperTypes={(superTypes) => setSuperTypes(superTypes)}\n                         setSubTypes={(subTypes) => setSubTypes(subTypes)}\n                         setManaCost={(manaCost) => setManaCost(manaCost)} manaCost={manaCost}\n                         setCardFrame={(cardFrame) => setCardFrame(cardFrame)}\n                         setSpellDescription={(spellDescription) => setSpellDescription(spellDescription)}\n                         setFlavorText={(flavorText) => setFlavorText(flavorText)}\n                         setPower={(power) => setPower(power)}\n                         setToughness={(toughness) => setToughness(toughness)}\n                         setLoyalty={(loyalty) => setLoyalty(loyalty)}/>\n                <CardImagePanel \n                         imageFile={imageFile} \n                         cardName={cardName} \n                         types={types} \n                         superTypes={superTypes} \n                         subTypes={subTypes}\n                         manaCost={manaCost}\n                         cardFrameColor={cardFrameColor} \n                         spellDescription={spellDescription}\n                         flavorText={flavorText}\n                         power={power}\n                         toughness={toughness}\n                         loyalty={loyalty}/>\n            </SimpleGrid>\n        </ChakraProvider>\n    );\n}\n\nexport { CardGenerator };"]},"metadata":{},"sourceType":"module"}