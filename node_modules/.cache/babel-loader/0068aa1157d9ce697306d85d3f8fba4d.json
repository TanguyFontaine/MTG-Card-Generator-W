{"ast":null,"code":"var _jsxFileName = \"C:\\\\Visual Studio Projects\\\\card-generator-tanguy\\\\src\\\\style_compomemts\\\\checkbox.jsx\";\nimport React from 'react';\nimport { Checkbox as ChakraCheckbox } from \"@chakra-ui/react\";\n/***************************************************************/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function Checkbox(props) {\n  let value = props.value;\n  let displayLabel = props.displayLabel;\n  let setValue = props.setValue;\n\n  let handleCheckChange = (e, initialList, isChecked) => {\n    let inputValue = e.target.value;\n    const newList = [];\n\n    if (isChecked) {\n      newList = initialList.concat({\n        inputValue\n      });\n    } else {\n      newList = initialList.splice(initialList.indexOf(inputValue), 1);\n    }\n\n    setValue(newList);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ChakraCheckbox, {\n      value: value,\n      onChange: (e, initialList, isChecked) => handleCheckChange(e, initialList, isChecked),\n      ...props,\n      children: displayLabel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_c = Checkbox;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkbox\");","map":{"version":3,"sources":["C:/Visual Studio Projects/card-generator-tanguy/src/style_compomemts/checkbox.jsx"],"names":["React","Checkbox","ChakraCheckbox","props","value","displayLabel","setValue","handleCheckChange","e","initialList","isChecked","inputValue","target","newList","concat","splice","indexOf"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAQ,IAAIC,cAArB,QAA2C,kBAA3C;AAEA;;;;AACA,OAAO,SAASD,QAAT,CAAkBE,KAAlB,EAAyB;AAC5B,MAAIC,KAAK,GAAGD,KAAK,CAACC,KAAlB;AACA,MAAIC,YAAY,GAAGF,KAAK,CAACE,YAAzB;AACA,MAAIC,QAAQ,GAAGH,KAAK,CAACG,QAArB;;AAEA,MAAIC,iBAAiB,GAAG,CAACC,CAAD,EAAIC,WAAJ,EAAiBC,SAAjB,KAA+B;AACnD,QAAIC,UAAU,GAAGH,CAAC,CAACI,MAAF,CAASR,KAA1B;AAEA,UAAMS,OAAO,GAAG,EAAhB;;AACA,QAAIH,SAAJ,EAAc;AACVG,MAAAA,OAAO,GAAGJ,WAAW,CAACK,MAAZ,CAAmB;AAACH,QAAAA;AAAD,OAAnB,CAAV;AACH,KAFD,MAGK;AACDE,MAAAA,OAAO,GAAGJ,WAAW,CAACM,MAAZ,CAAmBN,WAAW,CAACO,OAAZ,CAAoBL,UAApB,CAAnB,EAAoD,CAApD,CAAV;AACH;;AACDL,IAAAA,QAAQ,CAACO,OAAD,CAAR;AACH,GAXD;;AAaA,sBACA;AAAA,2BACE,QAAC,cAAD;AACE,MAAA,KAAK,EAAET,KADT;AAEE,MAAA,QAAQ,EAAE,CAACI,CAAD,EAAIC,WAAJ,EAAiBC,SAAjB,KAA+BH,iBAAiB,CAACC,CAAD,EAAIC,WAAJ,EAAiBC,SAAjB,CAF5D;AAAA,SAGMP,KAHN;AAAA,gBAKCE;AALD;AAAA;AAAA;AAAA;AAAA;AADF,mBADA;AAWH;KA7BeJ,Q","sourcesContent":["import React from 'react';\r\nimport { Checkbox as ChakraCheckbox}  from \"@chakra-ui/react\"\r\n\r\n/***************************************************************/\r\nexport function Checkbox(props) {\r\n    let value = props.value\r\n    let displayLabel = props.displayLabel\r\n    let setValue = props.setValue\r\n\r\n    let handleCheckChange = (e, initialList, isChecked) => {\r\n        let inputValue = e.target.value\r\n\r\n        const newList = []\r\n        if (isChecked){\r\n            newList = initialList.concat({inputValue})\r\n        } \r\n        else {\r\n            newList = initialList.splice(initialList.indexOf(inputValue), 1);\r\n        }\r\n        setValue(newList)\r\n    }\r\n\r\n    return (\r\n    <>\r\n      <ChakraCheckbox\r\n        value={value}\r\n        onChange={(e, initialList, isChecked) => handleCheckChange(e, initialList, isChecked)}\r\n        {...props}\r\n      >\r\n      {displayLabel}\r\n      </ChakraCheckbox>\r\n    </>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}