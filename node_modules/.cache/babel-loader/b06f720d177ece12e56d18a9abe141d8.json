{"ast":null,"code":"var _jsxFileName = \"C:\\\\Visual Studio Projects\\\\card-generator-tanguy\\\\src\\\\CardGenerator.jsx\";\nimport React, { useState } from 'react'; // 1. import `ChakraProvider` component to have chakra work correctly\n\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { SimpleGrid, useControllableState } from \"@chakra-ui/react\";\nimport \"@fontsource/eb-garamond/400.css\";\nimport \"@fontsource/eb-garamond/500.css\";\nimport \"@fontsource/eb-garamond/600.css\";\nimport \"@fontsource/eb-garamond/700.css\";\nimport \"@fontsource/eb-garamond/800.css\";\nimport \"@saeris/typeface-beleren-bold\";\nimport \"mana-font\";\n/***************************************************************/\n\nimport theme from \"./theme\";\nimport { UiPanel } from \"./components/ui_panel\";\nimport { CardImagePanel } from \"./components/card_image_panel\";\n/***************************************************************/\n\n/*function CardGenerator() {\r\n\r\n    const [imageFile, setImageFile] = useState({\r\n        name: \"\",\r\n        content: \"\"\r\n    })\r\n    const [imageCentering, setImageCentering] = useState(\"center\") \r\n\r\n    const [cardName, setCardName] = useState(\"\")\r\n    const [nameFontSize, setNameFontSize] = useControllableState({ defaultValue: 32 })\r\n\r\n    const [types, setTypes] = useState([])\r\n    const [superTypes, setSuperTypes] = useState([])\r\n    const [subTypes, setSubTypes] = useState(\"\")\r\n    const [typesFontSize, setTypesFontSize] = useControllableState({ defaultValue: 28 })\r\n\r\n    const [cardFrameColor, setCardFrame] = useState(\"\")\r\n\r\n    const [manaCost, setManaCost] = useState([])\r\n    // Easier to handle colorless mana on its own. Begin at -1 to display 0 mana artifacts\r\n    const [colorlessManaAmount, setColorlessManaAmount] = useState(-1)\r\n\r\n    const [spellDescription, setSpellDescription] = useState(\"\")\r\n    const [spellFontSize, setSpellFontSize] = useControllableState({ defaultValue: 22 })\r\n\r\n    const [flavorText, setFlavorText] = useState(\"\")\r\n    const [flavorTextFontSize, setFlavorTextFontSize] = useControllableState({ defaultValue: 21 })\r\n\r\n    const [power, setPower] = useState(\"\")\r\n    const [toughness, setToughness] = useState(\"\")\r\n    const [ptFontSize, setPTFontSize] = useControllableState({ defaultValue: 34 })\r\n\r\n    // clean planeswalker ?\r\n    const [loyalty, setLoyalty] = useState(\"\")\r\n\r\n    return (\r\n        <ChakraProvider theme={theme} >\r\n            <SimpleGrid columns={2} h=\"100vh\" w=\"100%\">\r\n                <UiPanel setCardName={setCardName} nameFontSize={nameFontSize} setNameFontSize={setNameFontSize}\r\n                         setImageFileFunction={setImageFile} selectedImageFileName={imageFile.name}\r\n                         setTypes={setTypes}\r\n                         setSuperTypes={setSuperTypes} setTypesFontSize={setTypesFontSize} typesFontSize={typesFontSize}\r\n                         setSubTypes={setSubTypes}\r\n                         setManaCost={setManaCost} manaCost={manaCost}\r\n                         setColorlessManaAmount={setColorlessManaAmount} colorlessManaAmount={colorlessManaAmount}\r\n                         setCardFrame={setCardFrame}\r\n                         setSpellDescription={setSpellDescription} spellDescription={spellDescription} setSpellFontSize={setSpellFontSize} spellFontSize={spellFontSize}\r\n                         setFlavorText={setFlavorText} setFlavorTextFontSize={setFlavorTextFontSize} flavorTextFontSize={flavorTextFontSize}\r\n                         setPower={setPower} setToughness={setToughness} setPTFontSize={setPTFontSize} ptFontSize={ptFontSize}\r\n                         setLoyalty={setLoyalty}\r\n                         setImageCentering={setImageCentering}/>\r\n                <CardImagePanel \r\n                         imageFile={imageFile} \r\n                         cardName={cardName} nameFontSize={nameFontSize}\r\n                         types={types} \r\n                         superTypes={superTypes} \r\n                         subTypes={subTypes} typesFontSize={typesFontSize}\r\n                         manaCost={manaCost}\r\n                         colorlessManaAmount={colorlessManaAmount}\r\n                         cardFrameColor={cardFrameColor} \r\n                         spellDescription={spellDescription} spellFontSize={spellFontSize}\r\n                         flavorText={flavorText} flavorTextFontSize={flavorTextFontSize}\r\n                         power={power} toughness={toughness} ptFontSize={ptFontSize}\r\n                         loyalty={loyalty}\r\n                         imageCentering={imageCentering}/>\r\n            </SimpleGrid>\r\n        </ChakraProvider>\r\n    );\r\n}\r\n\r\nexport { CardGenerator };*/\n\nimport { ScreenCapture } from 'react-screen-capture';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class CardGenerator extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      screenCapture: ''\n    };\n\n    this.handleScreenCapture = screenCapture => {\n      this.setState({\n        screenCapture\n      });\n    };\n\n    this.handleSave = () => {\n      const screenCaptureSource = this.state.screenCapture;\n      const downloadLink = document.createElement('a');\n      const fileName = 'react-screen-capture.png';\n      downloadLink.href = screenCaptureSource;\n      downloadLink.download = fileName;\n      downloadLink.click();\n    };\n  }\n\n  render() {\n    const {\n      screenCapture\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(ScreenCapture, {\n      onEndCapture: this.handleScreenCapture,\n      children: ({\n        onStartCapture\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onStartCapture,\n          children: \"Capture\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Quibusdam distinctio exercitationem a tempore delectus ducimus necessitatibus dolor voluptatum aut est quaerat aspernatur, vero quod aperiam odio. Exercitationem distinctio in voluptates?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Lorem ipsum dolor, sit amet consectetur adipisicing elit. Ut molestiae deserunt voluptas, labore a expedita error eligendi sunt fugit, nesciunt ullam corrupti quas natus, officia rerum? Officia cum amet quidem.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Lorem ipsum dolor sit, amet consectetur adipisicing elit. Quaerat, iusto repellat quae quos in rerum sunt obcaecati provident placeat hic saepe possimus eaque repellendus consequuntur quisquam nihil, sit ullam ratione.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"center\", {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: screenCapture,\n            alt: \"react-screen-capture\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: screenCapture && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.handleSave,\n              children: \"Download\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n;","map":{"version":3,"sources":["C:/Visual Studio Projects/card-generator-tanguy/src/CardGenerator.jsx"],"names":["React","useState","ChakraProvider","SimpleGrid","useControllableState","theme","UiPanel","CardImagePanel","ScreenCapture","CardGenerator","Component","state","screenCapture","handleScreenCapture","setState","handleSave","screenCaptureSource","downloadLink","document","createElement","fileName","href","download","click","render","onStartCapture"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CACA;;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,EAAqBC,oBAArB,QAAiD,kBAAjD;AAEA,OAAO,iCAAP;AACA,OAAO,iCAAP;AACA,OAAO,iCAAP;AACA,OAAO,iCAAP;AACA,OAAO,iCAAP;AACA,OAAO,+BAAP;AACA,OAAO,WAAP;AAEA;;AAEA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,cAAT,QAA+B,+BAA/B;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQC,aAAR,QAA4B,sBAA5B;;AAEA,OAAO,MAAMC,aAAN,SAA4BT,KAAK,CAACU,SAAlC,CAA4C;AAAA;AAAA;AAAA,SAC/CC,KAD+C,GACvC;AACNC,MAAAA,aAAa,EAAE;AADT,KADuC;;AAAA,SAK/CC,mBAL+C,GAKzBD,aAAa,IAAI;AACrC,WAAKE,QAAL,CAAc;AAACF,QAAAA;AAAD,OAAd;AACD,KAP8C;;AAAA,SAS/CG,UAT+C,GASlC,MAAM;AACjB,YAAMC,mBAAmB,GAAG,KAAKL,KAAL,CAAWC,aAAvC;AACA,YAAMK,YAAY,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAArB;AACA,YAAMC,QAAQ,GAAG,0BAAjB;AAEAH,MAAAA,YAAY,CAACI,IAAb,GAAoBL,mBAApB;AACAC,MAAAA,YAAY,CAACK,QAAb,GAAwBF,QAAxB;AACAH,MAAAA,YAAY,CAACM,KAAb;AACD,KAjB8C;AAAA;;AAmB/CC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEZ,MAAAA;AAAF,QAAoB,KAAKD,KAA/B;AAEA,wBACE,QAAC,aAAD;AAAe,MAAA,YAAY,EAAE,KAAKE,mBAAlC;AAAA,gBACG,CAAC;AAAEY,QAAAA;AAAF,OAAD,kBACC;AAAA,gCACE;AAAQ,UAAA,OAAO,EAAEA,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARF,eAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbF,eAmBE;AAAA,kCACE;AAAK,YAAA,GAAG,EAAEb,aAAV;AAAyB,YAAA,GAAG,EAAC;AAA7B;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA,sBACGA,aAAa,iBAAI;AAAQ,cAAA,OAAO,EAAE,KAAKG,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADpB;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAnBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YADF;AAgCD;;AAtD8C;AAuDhD","sourcesContent":["import React, { useState } from 'react';\r\n// 1. import `ChakraProvider` component to have chakra work correctly\r\nimport { ChakraProvider } from \"@chakra-ui/react\"\r\nimport { SimpleGrid, useControllableState } from \"@chakra-ui/react\"\r\n\r\nimport \"@fontsource/eb-garamond/400.css\"\r\nimport \"@fontsource/eb-garamond/500.css\"\r\nimport \"@fontsource/eb-garamond/600.css\"\r\nimport \"@fontsource/eb-garamond/700.css\"\r\nimport \"@fontsource/eb-garamond/800.css\"\r\nimport \"@saeris/typeface-beleren-bold\"\r\nimport \"mana-font\"\r\n\r\n/***************************************************************/\r\n\r\nimport theme from \"./theme\"\r\nimport { UiPanel } from \"./components/ui_panel\"\r\nimport { CardImagePanel } from \"./components/card_image_panel\"\r\n\r\n/***************************************************************/\r\n/*function CardGenerator() {\r\n\r\n    const [imageFile, setImageFile] = useState({\r\n        name: \"\",\r\n        content: \"\"\r\n    })\r\n    const [imageCentering, setImageCentering] = useState(\"center\") \r\n\r\n    const [cardName, setCardName] = useState(\"\")\r\n    const [nameFontSize, setNameFontSize] = useControllableState({ defaultValue: 32 })\r\n\r\n    const [types, setTypes] = useState([])\r\n    const [superTypes, setSuperTypes] = useState([])\r\n    const [subTypes, setSubTypes] = useState(\"\")\r\n    const [typesFontSize, setTypesFontSize] = useControllableState({ defaultValue: 28 })\r\n\r\n    const [cardFrameColor, setCardFrame] = useState(\"\")\r\n\r\n    const [manaCost, setManaCost] = useState([])\r\n    // Easier to handle colorless mana on its own. Begin at -1 to display 0 mana artifacts\r\n    const [colorlessManaAmount, setColorlessManaAmount] = useState(-1)\r\n\r\n    const [spellDescription, setSpellDescription] = useState(\"\")\r\n    const [spellFontSize, setSpellFontSize] = useControllableState({ defaultValue: 22 })\r\n\r\n    const [flavorText, setFlavorText] = useState(\"\")\r\n    const [flavorTextFontSize, setFlavorTextFontSize] = useControllableState({ defaultValue: 21 })\r\n\r\n    const [power, setPower] = useState(\"\")\r\n    const [toughness, setToughness] = useState(\"\")\r\n    const [ptFontSize, setPTFontSize] = useControllableState({ defaultValue: 34 })\r\n\r\n    // clean planeswalker ?\r\n    const [loyalty, setLoyalty] = useState(\"\")\r\n\r\n    return (\r\n        <ChakraProvider theme={theme} >\r\n            <SimpleGrid columns={2} h=\"100vh\" w=\"100%\">\r\n                <UiPanel setCardName={setCardName} nameFontSize={nameFontSize} setNameFontSize={setNameFontSize}\r\n                         setImageFileFunction={setImageFile} selectedImageFileName={imageFile.name}\r\n                         setTypes={setTypes}\r\n                         setSuperTypes={setSuperTypes} setTypesFontSize={setTypesFontSize} typesFontSize={typesFontSize}\r\n                         setSubTypes={setSubTypes}\r\n                         setManaCost={setManaCost} manaCost={manaCost}\r\n                         setColorlessManaAmount={setColorlessManaAmount} colorlessManaAmount={colorlessManaAmount}\r\n                         setCardFrame={setCardFrame}\r\n                         setSpellDescription={setSpellDescription} spellDescription={spellDescription} setSpellFontSize={setSpellFontSize} spellFontSize={spellFontSize}\r\n                         setFlavorText={setFlavorText} setFlavorTextFontSize={setFlavorTextFontSize} flavorTextFontSize={flavorTextFontSize}\r\n                         setPower={setPower} setToughness={setToughness} setPTFontSize={setPTFontSize} ptFontSize={ptFontSize}\r\n                         setLoyalty={setLoyalty}\r\n                         setImageCentering={setImageCentering}/>\r\n                <CardImagePanel \r\n                         imageFile={imageFile} \r\n                         cardName={cardName} nameFontSize={nameFontSize}\r\n                         types={types} \r\n                         superTypes={superTypes} \r\n                         subTypes={subTypes} typesFontSize={typesFontSize}\r\n                         manaCost={manaCost}\r\n                         colorlessManaAmount={colorlessManaAmount}\r\n                         cardFrameColor={cardFrameColor} \r\n                         spellDescription={spellDescription} spellFontSize={spellFontSize}\r\n                         flavorText={flavorText} flavorTextFontSize={flavorTextFontSize}\r\n                         power={power} toughness={toughness} ptFontSize={ptFontSize}\r\n                         loyalty={loyalty}\r\n                         imageCentering={imageCentering}/>\r\n            </SimpleGrid>\r\n        </ChakraProvider>\r\n    );\r\n}\r\n\r\nexport { CardGenerator };*/\r\n\r\nimport {ScreenCapture} from 'react-screen-capture'\r\n\r\nexport class CardGenerator extends React.Component {\r\n    state = {\r\n      screenCapture: '',\r\n    };\r\n  \r\n    handleScreenCapture = screenCapture => {\r\n      this.setState({screenCapture});\r\n    };\r\n  \r\n    handleSave = () => {\r\n      const screenCaptureSource = this.state.screenCapture;\r\n      const downloadLink = document.createElement('a');\r\n      const fileName = 'react-screen-capture.png';\r\n  \r\n      downloadLink.href = screenCaptureSource;\r\n      downloadLink.download = fileName;\r\n      downloadLink.click();\r\n    };\r\n  \r\n    render() {\r\n      const { screenCapture } = this.state;\r\n  \r\n      return (\r\n        <ScreenCapture onEndCapture={this.handleScreenCapture}>\r\n          {({ onStartCapture }) => (\r\n            <div>\r\n              <button onClick={onStartCapture}>Capture</button>\r\n              <p>\r\n                Lorem ipsum dolor sit amet consectetur adipisicing elit. Quibusdam\r\n                distinctio exercitationem a tempore delectus ducimus necessitatibus\r\n                dolor voluptatum aut est quaerat aspernatur, vero quod aperiam odio.\r\n                Exercitationem distinctio in voluptates?\r\n              </p>\r\n              <p>\r\n                Lorem ipsum dolor, sit amet consectetur adipisicing elit. Ut molestiae\r\n                deserunt voluptas, labore a expedita error eligendi sunt fugit, nesciunt\r\n                ullam corrupti quas natus, officia rerum? Officia cum amet quidem.\r\n              </p>\r\n              <p>\r\n                Lorem ipsum dolor sit, amet consectetur adipisicing elit. Quaerat, iusto\r\n                repellat quae quos in rerum sunt obcaecati provident placeat hic saepe\r\n                possimus eaque repellendus consequuntur quisquam nihil, sit ullam\r\n                ratione.\r\n              </p>\r\n              <center>\r\n                <img src={screenCapture} alt='react-screen-capture' />\r\n                <p>\r\n                  {screenCapture && <button onClick={this.handleSave}>Download</button>}\r\n                </p>\r\n              </center>\r\n            </div>\r\n          )}\r\n        </ScreenCapture>\r\n      );\r\n    }\r\n  };\r\n  "]},"metadata":{},"sourceType":"module"}